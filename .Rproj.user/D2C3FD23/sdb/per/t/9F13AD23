{
    "collab_server" : "",
    "contents" : "main_function <- function(PN_usage, PN_IB, percentage=1, interval=26, range=16) {\n  \n  if(1 < percentage || percentage <= 0){\n    stop(\"Warning: percentage is the percent of usage data, and is between 0 and 1\")\n  }\n  \n  if(26 < interval || interval <= 0){\n    stop(\"Warning: interval is the prediction range, and is between 0 and 26\")\n  }\n  \n  tt <- nrow(PN_usage)\n  l <- round(percentage*tt)\n  if(l <= (2*interval + range + 1)){\n    stop(\"Warning: please incease the percentage, Pn_usage is not enough for prediction\")\n  }\n  \n  if(!is.data.frame(PN_usage)){\n    stop(\"data must be a single data frame.\")\n  } else {\n    if(ncol(PN_usage) != 2 || !is.numeric(PN_usage[[2]])){\n      stop(\"data must be a 2 column data.frame, with the first column being a set of timestamp, and the second coloumn being numeric values.\")\n    }\n    if (!(class(PN_usage[[1]])[1] == \"Date\")) {\n      stop(\"the first column being a set of timestamp.\")\n    }\n  }\n  if (any((names(PN_usage) == c(\"Date\", \"Magnitude\")) == FALSE)) {\n    colnames(PN_usage) <- c(\"Date\", \"Magnitude\")\n  }\n  \n  if(!is.data.frame(PN_IB)){\n    stop(\"data must be a single data frame.\")\n  } else {\n    if(ncol(PN_IB) != 2 || !is.numeric(PN_IB[[2]])){\n      stop(\"data must be a 2 column data.frame, with the first column being a set of timestamp, and the second coloumn being numeric values.\")\n    }\n    if (!(class(PN_IB[[1]])[1] == \"Date\")) {\n      stop(\"the first column being a set of timestamp.\")\n    }\n  }\n  if (any((names(PN_IB) == c(\"Date\", \"Magnitude\")) == FALSE)) {\n    colnames(PN_IB) <- c(\"Date\", \"Magnitude\")\n  }\n  \n\n  #performance plot and results\n  PN_ts <- ts(PN_usage[1:l, ][[2]])\n  \n  me_accuracy_list <- c()\n  IB_accuracy_list <- c()\n  HW_accuracy_list <- c()\n  sa_accuracy_list <- c()\n  se_accuracy_list <- c()\n  arima_accuracy_list <- c()\n  nn_accuracy_list <- c()\n  accuracy_list <- c()\n  lag <- c()\n  lag_list <- c()\n  com_forecasts <- c()\n  \n  for(i in 1:interval){\n    actual <- PN_ts[(i+range):(i+interval+range-1)]\n    me_pred <-rep(mean(PN_ts[i:(i+range-1)]), interval)\n    me_accuracy <- mean(abs(pmin(actual, me_pred)/pmax(actual, me_pred)) * 100)\n    me_accuracy_list <- c(me_accuracy_list, me_accuracy)\n    \n    res1 <- Anomaly_Detection(PN_usage[1:(i+range-1), ], PN_IB, alpha = 0.1)\n    rep_PN_usage <- replace_outlier(PN_usage[1:(i+range-1), ], res1$anoms, replace_method=\"karman\")\n    lag <- c(lag, lag_caculation(rep_PN_usage, PN_IB))\n    lag_list <- c(lag_list, round(mean(lag)))\n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=round(mean(lag)), message =res1$message, pred_length=26, pred_method='IB')\n    IB_pred <- pred1$pred[[2]][1:interval]\n    IB_accuracy <- mean(abs(pmin(actual, IB_pred)/pmax(actual, IB_pred)) * 100)\n    IB_accuracy_list <- c(IB_accuracy_list, IB_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='holt.winter')\n    HW_pred <- pred1$pred[[2]]\n    HW_accuracy <- mean(abs(pmin(actual, HW_pred)/pmax(actual, HW_pred)) * 100)\n    HW_accuracy_list <- c(HW_accuracy_list, HW_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.arima')\n    sa_pred <- pred1$pred[[2]]\n    sa_accuracy <- mean(abs(pmin(actual, sa_pred)/pmax(actual, sa_pred)) * 100)\n    sa_accuracy_list <- c(sa_accuracy_list, sa_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.ets')\n    se_pred <- pred1$pred[[2]]\n    se_accuracy <- mean(abs(pmin(actual, se_pred)/pmax(actual, se_pred)) * 100)\n    se_accuracy_list <- c(se_accuracy_list, se_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='seasonal.arima')\n    arima_pred <- pred1$pred[[2]]\n    arima_accuracy <- mean(abs(pmin(actual, arima_pred)/pmax(actual, arima_pred)) * 100)\n    arima_accuracy_list <- c(arima_accuracy_list, arima_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='NN.NNAR')\n    nn_pred <- pred1$pred[[2]]\n    nn_accuracy <- mean(abs(pmin(actual, nn_pred)/pmax(actual, nn_pred)) * 100)\n    nn_accuracy_list <- c(nn_accuracy_list, nn_accuracy)\n    \n    indiv_forecasts <- cbind(IB_pred[1], HW_pred[1], sa_pred[1], se_pred[1], arima_pred[1], nn_pred[1])\n    com_forecasts <- rbind(com_forecasts, indiv_forecasts)\n    \n  }\n  \n  ind_nam <- c(\"IB\", \"HW\", \"sa\", \"se\", \"arima\", \"nn\")\n  colnames(com_forecasts) <- ind_nam\n  actualed <- PN_ts[(1+range):(interval+range)]\n  \n  for(i in (interval+1):(length(PN_ts)-range-interval)){\n    \n    actual <- PN_ts[(i+range):(i+interval+range-1)]\n    me_pred <-rep(mean(PN_ts[i:(i+range-1)]), interval)\n    me_accuracy <- mean(abs(pmin(actual, me_pred)/pmax(actual, me_pred)) * 100)\n    me_accuracy_list <- c(me_accuracy_list, me_accuracy)\n    \n    res1 <- Anomaly_Detection(PN_usage[1:(i+range-1), ], PN_IB, alpha = 0.1)\n    rep_PN_usage <- replace_outlier(PN_usage[1:(i+range-1), ], res1$anoms, replace_method=\"karman\")\n    lag <- c(lag, lag_caculation(rep_PN_usage, PN_IB))\n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=round(mean(lag)), message =res1$message, pred_length=26, pred_method='IB')\n    IB_pred <- pred1$pred[[2]][1:interval]\n    IB_accuracy <- mean(abs(pmin(actual, IB_pred)/pmax(actual, IB_pred)) * 100)\n    IB_accuracy_list <- c(IB_accuracy_list, IB_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='holt.winter')\n    HW_pred <- pred1$pred[[2]]\n    HW_accuracy <- mean(abs(pmin(actual, HW_pred)/pmax(actual, HW_pred)) * 100)\n    HW_accuracy_list <- c(HW_accuracy_list, HW_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.arima')\n    sa_pred <- pred1$pred[[2]]\n    sa_accuracy <- mean(abs(pmin(actual, sa_pred)/pmax(actual, sa_pred)) * 100)\n    sa_accuracy_list <- c(sa_accuracy_list, sa_accuracy)\n    \n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.ets')\n    se_pred <- pred1$pred[[2]]\n    se_accuracy <- mean(abs(pmin(actual, se_pred)/pmax(actual, se_pred)) * 100)\n    se_accuracy_list <- c(se_accuracy_list, se_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='seasonal.arima')\n    arima_pred <- pred1$pred[[2]]\n    arima_accuracy <- mean(abs(pmin(actual, arima_pred)/pmax(actual, arima_pred)) * 100)\n    arima_accuracy_list <- c(arima_accuracy_list, arima_accuracy)\n    \n    pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='NN.NNAR')\n    nn_pred <- pred1$pred[[2]]\n    nn_accuracy <- mean(abs(pmin(actual, nn_pred)/pmax(actual, nn_pred)) * 100)\n    nn_accuracy_list <- c(nn_accuracy_list, nn_accuracy)\n    \n    combine_f <- Forecast_comb(actualed, com_forecasts, Averaging_scheme = \"cls\")\n    fhat <- cbind(IB_pred, HW_pred, sa_pred, se_pred, arima_pred, nn_pred)\n    TT <- NROW(fhat)\n    predicted <- t(combine_f$weights %*% t(fhat))\n    accuracy <- mean(abs(pmin(actual, predicted)/pmax(actual, predicted)) * 100)\n    accuracy_list <- c(accuracy_list, accuracy)\n    \n    indiv_forecasts <- cbind(IB_pred[1], HW_pred[1], sa_pred[1], se_pred[1], arima_pred[1], nn_pred[1])\n    com_forecasts <- rbind(com_forecasts, indiv_forecasts)\n    actualed <- c(actualed, actual[1])\n  }\n  \n  # lll <- length(PN_ts)-range-interval\n\n  me_accuracy_mean <- mean(me_accuracy_list, na.rm = TRUE)\n  IB_accuracy_mean <- mean(IB_accuracy_list, na.rm = TRUE)\n  HW_accuracy_mean <- mean(HW_accuracy_list, na.rm = TRUE)\n  sa_accuracy_mean <- mean(sa_accuracy_list, na.rm = TRUE)\n  se_accuracy_mean <- mean(se_accuracy_list, na.rm = TRUE)\n  arima_accuracy_mean <- mean(arima_accuracy_list, na.rm = TRUE)\n  nn_accuracy_mean <- mean(nn_accuracy_list, na.rm = TRUE)\n  accuracy_mean <- mean(accuracy_list, na.rm = TRUE)\n  accuracy_results <- c(me_accuracy_mean, IB_accuracy_mean, HW_accuracy_mean, sa_accuracy_mean, se_accuracy_mean, \n                        arima_accuracy_mean, nn_accuracy_mean, accuracy_mean)\n  accuracy_results <- matrix(accuracy_results, nrow = 1)\n  colnames(accuracy_results) <- c(\"MA\" ,\"IB\", \"HW\", \"sa\", \"se\", \"arima\", \"nn\", \"combined_f\")\n  \n  weights <- matrix(combine_f$weights, nrow = 1)\n  colnames(weights) <- c(\"IB\", \"HW\", \"sa\", \"se\", \"arima\", \"nn\")\n  weights_dt <- reshape2::melt(data.frame(weights))\n  colnames(weights_dt) <- c(\"methods\", \"weights\")\n  weights_plot <- ggplot(weights_dt, aes(x=\"\", y=weights, fill=methods)) + theme_bw() +\n    geom_bar(aes(fill=methods), position=\"dodge\", stat=\"identity\")\n  \n  date_range1 <- PN_usage[[1]][(range+1):(length(PN_ts)-interval)]\n  date_range2 <- PN_usage[[1]][(range+interval+1):(length(PN_ts)-interval)]\n  accurary_dt <- data.frame(date=date_range1, IB=IB_accuracy_list, MA=me_accuracy_list)\n  accurary_dt <- reshape2::melt(accurary_dt, id=\"date\")\n  colnames(accurary_dt)[3] <- \"accuracy\"\n  accurary_dt <- rbind(accurary_dt, data.frame(date=date_range2, variable=\"combined_f\", accuracy=accuracy_list))\n  accuracy_plot <- ggplot(data=accurary_dt, aes(x=date, y=accuracy, colour=variable)) + theme_bw() + geom_line()\n  \n  \n  #prediction resuls\n  res1 <- Anomaly_Detection(PN_usage[1:l, ], PN_IB, alpha = 0.1)\n  res1$plot <- res1$plot + ggplot2::geom_line(data=PN_usage, ggplot2::aes_string(x=\"Date\", y=\"Magnitude\"), alpha=0.2)\n  if(!(dim(res1$anoms)[1]==0)){\n    rep_PN_usage <- replace_outlier(PN_usage[1:l, ], res1$anoms, replace_method=\"karman\")\n    replace_data <- rep_PN_usage[(rep_PN_usage[[1]] %in% res1$anoms[[1]]), ]\n    res1$plot <- res1$plot + ggplot2::geom_point(data=replace_data, ggplot2::aes_string(x=\"Date\", y=\"Magnitude\"), colour = \"black\", size = 3, shape = 1)\n    \n  } else {\n    rep_PN_usage <- PN_usage[1:l, ]\n  }\n  res1$plot <- res1$plot + ggplot2::geom_point(data=rep_PN_usage, ggplot2::aes_string(x=\"Date\", y=\"Magnitude\"), colour = \"blue\", alpha=0.2)\n  lag <- c(lag, lag_caculation(rep_PN_usage, PN_IB))\n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=round(mean(lag)), message =res1$message, pred_length=26, pred_method='IB')\n  IB_pred_results <- pred1$pred[1:interval, ]\n  res1$plot <- res1$plot + ggplot2::geom_point(data=pred1$IB_trasfer, ggplot2::aes_string(x=\"timestamp\", y=\"baseline\"), alpha=0.6, size = 1)\n  \n  me_pred <-rep(mean(rep_PN_usage[(l-range+1):l, ][[2]]), interval)\n  IB_pred <- pred1$pred[[2]][1:interval]\n  \n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='holt.winter')\n  HW_pred <- pred1$pred[[2]]\n  \n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.arima')\n  sa_pred <- pred1$pred[[2]]\n  \n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='stlf.ets')\n  se_pred <- pred1$pred[[2]]\n  \n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='seasonal.arima')\n  arima_pred <- pred1$pred[[2]]\n  \n  pred1 <- prediction_method(rep_PN_usage, PN_IB, lag=res1$lag, message =res1$message, pred_length=interval, pred_method='NN.NNAR')\n  nn_pred <- pred1$pred[[2]]\n  \n  combine_f <- Forecast_comb(actualed, com_forecasts, Averaging_scheme = \"cls\")\n  fhat <- cbind(IB_pred, HW_pred, sa_pred, se_pred, arima_pred, nn_pred)\n  TT <- NROW(fhat)\n  predicted <- t(combine_f$weights %*% t(fhat))\n  \n  pred_results <- data.frame(date=IB_pred_results[[1]], IB=IB_pred, combined_f=predicted, MA=me_pred)\n  \n  lag_plot <- ggplot(data.frame(lag), aes(lag)) + theme_bw() + geom_density()\n  \n  simi_message <- res1$message\n  \n  freq_message <- frequency_measure(PN_usage)\n  \n  return(list(accuracy_plot=accuracy_plot, weights_plot=weights_plot,weights=weights, accuracy_results=accuracy_results, \n              pred_results=pred_results, pred_plot=res1$plot, lag_plot=lag_plot, simi_message=simi_message, freq_message=freq_message))\n  \n}",
    "created" : 1507701145630.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2581611798",
    "id" : "9F13AD23",
    "lastKnownWriteTime" : 1507787687,
    "last_content_update" : 1507787687695,
    "path" : "~/workspace/UsagePrediction/R/main_function.R",
    "project_path" : "R/main_function.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}