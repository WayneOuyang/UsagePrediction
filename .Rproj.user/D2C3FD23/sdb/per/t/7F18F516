{
    "collab_server" : "",
    "contents" : "Anomaly_Detection <- function(x, y, max_anoms = 0.05, direction = 'both',\n                               alpha = 0.05, threshold = 'None', plot = TRUE,\n                               xlabel = 'time', ylabel = 'usage',\n                               title = NULL, verbose=FALSE, na.rm = FALSE){\n  \n  pckg = c(\"dtwclust\", \"ggplot2\", \"lubridate\", \"dplyr\", \"quadprog\", \"zoo\")\n  \n  temp <- unlist(lapply(pckg, require, character.only=T))\n  \n  if (!all(temp==1) ) {\n    stop(\"This function relies on packages \\\"dtwclust\\\" \\\"ggplot2\\\" \\\"lubridate\\\" \\\"dplyr\\\" \\\"quadprog\\\" \\\"zoo\\\".\n         Use ?install.packages if they are not yet installed. \\n\")\n  }\n\n  if(dim(x)[1] > dim(y)[1]*4.34524){\n    stop(\"Data quality issue: Install base has less data than Usage\")\n  }\n\n  if(x[[1L]][1] < y[[1L]][1]){\n    stop(\"Data quality issue: the starting date of Usage is earlier than IB\")\n  }\n\n  if(x[[1L]][dim(x)[1]] > y[[1L]][dim(y)[1]]){\n    stop(\"Data quality issue: the ending date of Usage is later than IB\")\n  }\n\n  if(!is.data.frame(x)){\n    stop(\"data must be a single data frame.\")\n  } else {\n    if(ncol(x) != 2 || !is.numeric(x[[2]])){\n      stop(\"data must be a 2 column data.frame, with the first column being a set of timestamp, and the second coloumn being numeric values.\")\n    }\n    if (!(class(x[[1]])[1] == \"Date\")) {\n      stop(\"the first column being a set of timestamp.\")\n    }\n  }\n  if (any((names(x) == c(\"timestamp\", \"count\")) == FALSE)) {\n    colnames(x) <- c(\"timestamp\", \"count\")\n  }\n\n  if(!is.data.frame(y)){\n    stop(\"data must be a single data frame.\")\n  } else {\n    if(ncol(y) != 2 || !is.numeric(y[[2]])){\n      stop(\"data must be a 2 column data.frame, with the first column being a set of timestamp, and the second coloumn being numeric values.\")\n    }\n    if (!(class(y[[1]])[1] == \"Date\")) {\n      stop(\"the first column being a set of timestamp.\")\n    }\n  }\n  if (any((names(y) == c(\"timestamp\", \"count\")) == FALSE)) {\n    colnames(y) <- c(\"timestamp\", \"count\")\n  }\n\n\n  if(!is.logical(na.rm)){\n    stop(\"na.rm must be either TRUE (T) or FALSE (F)\")\n  }\n\n  if(any(is.na(x$timestamp))){\n    if(na.rm){\n      x <- x[-which(is.na(x$timestamp)), ]\n    } else {\n      stop(\"timestamp contains NAs, please set na.rm to TRUE or remove the NAs manually.\")\n    }\n  }\n\n  if(any(is.na(y$timestamp))){\n    if(na.rm){\n      y <- y[-which(is.na(y$timestamp)), ]\n    } else {\n      stop(\"timestamp contains NAs, please set na.rm to TRUE or remove the NAs manually.\")\n    }\n  }\n\n  if(max_anoms > .49){\n    stop(paste(\"max_anoms must be less than 50% of the data points (max_anoms =\", round(max_anoms*length(x[[2]]), 0), \" data_points =\", length(x[[2]]),\").\"))\n  } else if(max_anoms < 0){\n    stop(\"max_anoms must be positive.\")\n  } else if(max_anoms == 0){\n    warning(\"0 max_anoms results in max_outliers being 0.\")\n  }\n\n  if(!direction %in% c('pos', 'neg', 'both')){\n    stop(\"direction options are: pos | neg | both.\")\n  }\n  if(!(0.01 <= alpha || alpha <= 0.1)){\n    if(verbose) message(\"Warning: alpha is the statistical signifigance, and is usually between 0.01 and 0.1\")\n  }\n  if(!threshold %in% c('None','med_max','p95','p99')){\n    stop(\"threshold options are: None | med_max | p95 | p99.\")\n  }\n  if(!is.logical(plot)){\n    stop(\"plot must be either TRUE (T) or FALSE (F)\")\n  }\n  if(!is.character(xlabel)){\n    stop(\"xlabel must be a string\")\n  }\n  if(!is.character(ylabel)){\n    stop(\"ylabel must be a string\")\n  }\n  if(!is.character(title) && !is.null(title)){\n    stop(\"title must be a string\")\n  }\n  if(is.null(title)){\n    title <- \"\"\n  } else {\n    title <- paste(title, \" : \", sep=\"\")\n  }\n\n  period = 4\n  num_obs <- length(x[[2]])\n\n  if(max_anoms < 1/num_obs){\n    max_anoms <- 1/num_obs\n  }\n\n  all_data <- list(x)\n  all_anoms <- data.frame(timestamp=numeric(0), count=numeric(0))\n\n  anomaly_direction = switch(direction,\n                             \"pos\" = data.frame(one_tail=TRUE, upper_tail=TRUE), # upper-tail only (positive going anomalies)\n                             \"neg\" = data.frame(one_tail=TRUE, upper_tail=FALSE), # lower-tail only (negative going anomalies)\n                             \"both\" = data.frame(one_tail=FALSE, upper_tail=TRUE)) # Both tails. Tail direction is not actually used.\n\n  s_h_esd_info <- detect_anoms(all_data[[1]], y, k=max_anoms, alpha=alpha, num_obs_per_period=period,\n                                     one_tail=anomaly_direction$one_tail, upper_tail=anomaly_direction$upper_tail, verbose=verbose)\n\n  s_h_esd_timestamps <- s_h_esd_info$R_idx\n  coefficients <- s_h_esd_info$coefficients\n  y$baseline <- coefficients[2]+ coefficients[1]*y[[2L]]\n  timestamp_lag <- y$timestamp\n  if(s_h_esd_info$similarity){\n    month(timestamp_lag) <- month(timestamp_lag) + s_h_esd_info$lag\n  }\n  y_transfer <- data.frame(timestamp=timestamp_lag, baseline=y$baseline)\n\n\n  if(!is.null(s_h_esd_timestamps)){\n    anoms <- subset(all_data[[1]], (all_data[[1]][[1]] %in% s_h_esd_timestamps))\n  } else {\n    anoms <- data.frame(timestamp=numeric(0), count=numeric(0))\n  }\n\n  if(threshold != \"None\"){\n\n    periodic_maxs <- tapply(x[[2]],as.Date(x[[1]]),FUN=max)\n\n    if(threshold == 'med_max'){\n      thresh <- median(periodic_maxs)\n    }else if (threshold == 'p95'){\n      thresh <- quantile(periodic_maxs, .95)\n    }else if (threshold == 'p99'){\n      thresh <- quantile(periodic_maxs, .99)\n    }\n\n    anoms <- subset(anoms, anoms[[2]] >= thresh)\n  }\n  all_anoms <- rbind(all_anoms, anoms)\n\n  anom_pct <- (length(all_anoms[[2]]) / num_obs) * 100\n\n  if(s_h_esd_info$similarity){\n    message <- \"trend match\"\n  } else {\n    message <- \"trend not match\"\n  }\n\n  if(anom_pct == 0){\n    if(verbose) message(\"No anomalies detected.\")\n\n    plot_title <-  title\n    color_name <- paste(\"\\\"\", title, \"\\\"\", sep=\"\")\n    xgraph <- ggplot2::ggplot(x, ggplot2::aes_string(x=\"timestamp\", y=\"count\")) + ggplot2::theme_bw() + ggplot2::theme(panel.grid.major = ggplot2::element_line(colour = \"gray60\"), panel.grid.major.y = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), text=ggplot2::element_text(size = 14))\n    xgraph <- xgraph + ggplot2::geom_line(data=x, ggplot2::aes_string(colour=color_name), alpha=0.8)\n    xgraph <- xgraph + ggplot2::geom_point(data=y, ggplot2::aes_string(x=\"timestamp\", y=\"baseline\"), alpha=0.2, size = 1)\n    xgraph <- xgraph + ggplot2::geom_point(data=y_transfer, ggplot2::aes_string(x=\"timestamp\", y=\"baseline\"), alpha=0.4, size = 1)\n    xgraph <- xgraph + ggplot2::labs(x=xlabel, y=ylabel)\n    xgraph <- xgraph + ggplot2::theme(legend.position=\"none\")\n\n    anoms <- data.frame()\n  } else {\n\n    plot_title <-  title\n    color_name <- paste(\"\\\"\", title, \"\\\"\", sep=\"\")\n    xgraph <- ggplot2::ggplot(x, ggplot2::aes_string(x=\"timestamp\", y=\"count\")) + ggplot2::theme_bw() + ggplot2::theme(panel.grid.major = ggplot2::element_line(colour = \"gray60\"), panel.grid.major.y = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), text=ggplot2::element_text(size = 14))\n    xgraph <- xgraph + ggplot2::geom_line(data=x, ggplot2::aes_string(colour=color_name), alpha=0.8)\n    xgraph <- xgraph + ggplot2::geom_point(data=y, ggplot2::aes_string(x=\"timestamp\", y=\"baseline\"), alpha=0.1, size = 1)\n    xgraph <- xgraph + ggplot2::geom_point(data=y_transfer, ggplot2::aes_string(x=\"timestamp\", y=\"baseline\"), alpha=0.3, size = 1)\n    xgraph <- xgraph + ggplot2::labs(x=xlabel, y=ylabel, title=plot_title)\n    xgraph <- xgraph + ggplot2::geom_point(data=all_anoms, ggplot2::aes_string(color=paste(\"\\\"zzz_\",title,\"\\\"\",sep=\"\")), size = 3, shape = 1)\n    xgraph <- xgraph + ggplot2::theme(legend.position=\"none\")\n\n    all_anoms[[1]] <- as.Date(format(all_anoms[[1]], format=\"%Y-%m-%d\"))\n    anoms <- data.frame(timestamp=all_anoms[[1]], anoms=all_anoms[[2]], stringsAsFactors=FALSE)\n  }\n\n\n  if(plot){\n    return (list(anoms = anoms, plot = xgraph, message = message, lag = s_h_esd_info$lag))\n  } else {\n    return (list(anoms = anoms, plot = plot.new(), message = message, lag = s_h_esd_info$lag))\n  }\n}\n",
    "created" : 1506566580082.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2192281810",
    "id" : "7F18F516",
    "lastKnownWriteTime" : 1507703418,
    "last_content_update" : 1507703418005,
    "path" : "~/workspace/UsagePrediction/R/AnormalyDetection.R",
    "project_path" : "R/AnormalyDetection.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}